{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-b620a6b0dd758d3450fad2552521cc15166c31a9",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/RedPacketSystem.sol": "project/contracts/RedPacketSystem.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/RedPacketSystem.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * @title 红包系统合约\n * @dev 一个支持多用户创建多个随机或均分红包的工厂合约。\n * @notice 增加了事件，优化了资金分配逻辑，并支持超时后提现。\n */\ncontract RedPacketSystem {\n    // 红包结构体\n    struct RedPacket {\n        address owner; // 创建者\n        string message; // 祝福语\n        uint256 totalAmount; // 总金额\n        uint256 balance; // 剩余金额\n        uint256 totalCount; // 总份数\n        uint256 claimedCount; // 已领取份数\n        bool isEven; // 是否均分\n        uint256 creationTime; // 创建时间\n    }\n\n    // 红包ID计数器\n    uint256 public packetCounter;\n\n    // 存储所有红包: packetId => RedPacket\n    mapping(uint256 => RedPacket) public packets;\n\n    // 记录谁抢了哪个红包: packetId => userAddress => bool\n    mapping(uint256 => mapping(address => bool)) public hasClaimed;\n\n    // --- Events ---\n    // v-- 修改点 1: 在事件定义的末尾，增加了 bool isEven --v\n    event PacketCreated(\n        uint256 indexed packetId,\n        address indexed creator,\n        string message,\n        uint256 totalAmount,\n        uint256 totalCount,\n        bool isEven\n    );\n    event PacketClaimed(\n        uint256 indexed packetId,\n        address indexed claimer,\n        uint256 amount\n    );\n    event PacketEmpty(uint256 indexed packetId);\n    event AlreadyClaimed(uint256 indexed packetId, address indexed claimer);\n    event FundsWithdrawn(\n        uint256 indexed packetId,\n        address indexed owner,\n        uint256 amount\n    );\n\n    /**\n     * @dev 创建一个新红包\n     * @param _message 祝福语\n     * @param _count 红包数量\n     * @param _isEven 是否均分\n     */\n    function createRedPacket(\n        string memory _message,\n        uint256 _count,\n        bool _isEven\n    ) external payable {\n        require(msg.value > 0, \"RedPacket: Must send ETH to create\");\n        require(_count > 0, \"RedPacket: Count must be greater than 0\");\n        require(\n            msg.value >= _count,\n            \"RedPacket: Amount must be at least 1 wei per packet\"\n        );\n\n        uint256 packetId = ++packetCounter;\n        packets[packetId] = RedPacket({\n            owner: msg.sender,\n            message: _message,\n            totalAmount: msg.value,\n            balance: msg.value,\n            totalCount: _count,\n            claimedCount: 0,\n            isEven: _isEven,\n            creationTime: block.timestamp\n        });\n\n        // v-- 修改点 2: 在 emit 语句的末尾，增加了 _isEven --v\n        emit PacketCreated(\n            packetId,\n            msg.sender,\n            _message,\n            msg.value,\n            _count,\n            _isEven\n        );\n    }\n\n    /**\n     * @dev 抢红包\n     * @param _packetId 红包的ID\n     */\n    function claimRedPacket(uint256 _packetId) external {\n        RedPacket storage packet = packets[_packetId];\n\n        // 基础检查\n        require(packet.owner != address(0), \"RedPacket: Not exist\");\n        require(\n            packet.claimedCount < packet.totalCount,\n            \"RedPacket: No packets left\"\n        );\n        if (hasClaimed[_packetId][msg.sender]) {\n            emit AlreadyClaimed(_packetId, msg.sender);\n            return; // 使用 return 而不是 require 来触发事件，对前端更友好\n        }\n\n        hasClaimed[_packetId][msg.sender] = true;\n        packet.claimedCount++;\n\n        uint256 amount;\n        if (packet.claimedCount == packet.totalCount) {\n            // 最后一个人，获得所有剩余金额\n            amount = packet.balance;\n        } else {\n            if (packet.isEven) {\n                // 均分模式\n                amount = packet.totalAmount / packet.totalCount;\n            } else {\n                // 随机模式\n                amount = _getRandomAmount(\n                    packet.balance,\n                    packet.totalCount - packet.claimedCount + 1\n                );\n            }\n        }\n\n        if (amount > packet.balance) {\n            amount = packet.balance;\n        }\n\n        packet.balance -= amount;\n\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n        require(success, \"RedPacket: Transfer failed\");\n\n        emit PacketClaimed(_packetId, msg.sender, amount);\n\n        if (packet.claimedCount == packet.totalCount) {\n            emit PacketEmpty(_packetId);\n        }\n    }\n\n    /**\n     * @dev 生成随机金额 (内部函数)\n     */\n    function _getRandomAmount(\n        uint256 _balance,\n        uint256 _remainingCount\n    ) private view returns (uint256) {\n        if (_remainingCount == 0) return 0;\n        uint256 avg = _balance / _remainingCount;\n        uint256 seed = uint256(\n            keccak256(abi.encodePacked(block.timestamp, msg.sender, _balance))\n        );\n        uint256 random = (seed % (avg * 2)) + 1;\n\n        uint256 maxAmount = _balance - (_remainingCount - 1); // 至少为后面的人留 1 wei\n        if (random > maxAmount) {\n            random = maxAmount;\n        }\n        return random;\n    }\n\n    /**\n     * @dev 创建者在24小时后取回剩余金额\n     * @param _packetId 红包ID\n     */\n    function withdraw(uint256 _packetId) external {\n        RedPacket storage packet = packets[_packetId];\n        require(msg.sender == packet.owner, \"RedPacket: Not owner\");\n        require(\n            block.timestamp > packet.creationTime + 24 hours,\n            \"RedPacket: Not expired yet\"\n        );\n        require(packet.balance > 0, \"RedPacket: No balance to withdraw\");\n\n        uint256 amountToWithdraw = packet.balance;\n        packet.balance = 0;\n\n        (bool success, ) = msg.sender.call{value: amountToWithdraw}(\"\");\n        require(success, \"RedPacket: Withdraw failed\");\n\n        emit FundsWithdrawn(_packetId, msg.sender, amountToWithdraw);\n    }\n}\n"
      }
    }
  }
}